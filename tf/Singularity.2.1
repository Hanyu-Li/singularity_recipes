Bootstrap: docker
From: nvidia/cuda:10.1-cudnn7-devel-centos7

%help
Centos7 with cuda10.1 cudnn7

To start your container simply try
singularity exec THIS_CONTAINER.simg bash

To use GPUs, try
singularity exec --nv THIS_CONTAINER.simg bash


%environment

    # for system
    export CUDA_DEVICE_ORDER=PCI_BUS_ID

    # Add cupti to the path for profiling:
    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda/extras/CUPTI/lib64

    export PATH=/usr/local/mpich/install/bin/:${PATH}
    export LD_LIBRARY_PATH=/usr/local/mpich/install/lib/:${LD_LIBRARY_PATH}
    #source scl_source enable devtoolset-7
    export CC=/opt/rh/devtoolset-8/root/bin/gcc
    export CXX=/opt/rh/devtoolset-8/root/bin/g++
    alias gcc=/opt/rh/devtoolset-8/root/bin/gcc
    alias g++=/opt/rh/devtoolset-8/root/bin/g++

%post

    # yum basics
    yum update -y
    yum groupinstall -y "Development Tools"
    yum install -y epel-release
    yum install -y centos-release-scl
    yum install -y devtoolset-8
    yum install -y wget vim
    yum install -y openssh-clients zip
    yum install -y hdf5 python36-setuptools python36-devel
    scl enable devtoolset-8 bash && g++ --version
    #echo "source scl_source enable devtoolset-7" >> /etc/bashrc
    #source /etc/bashrc
    #source scl_source enable devtoolset-7
    #echo "source /opt/rh/devtoolset-7/enable" >> /etc/bashrc
    #bash
    alias gcc=/opt/rh/devtoolset-8/root/bin/gcc
    alias g++=/opt/rh/devtoolset-8/root/bin/g++
    export CC=/opt/rh/devtoolset-8/root/bin/gcc
    export CXX=/opt/rh/devtoolset-8/root/bin/g++
    echo "G++ version"
    g++ --version
    $CXX --version
    yum install -y easy_install-3.6 python36-pip

    # #alias python=python3

    # pip basics
    pip3 install -U pip

    # install MPICH
    wget -q http://www.mpich.org/static/downloads/3.2.1/mpich-3.2.1.tar.gz
    tar xf mpich-3.2.1.tar.gz
    rm mpich-3.2.1.tar.gz
    cd mpich-3.2.1
    # disable the addition of the RPATH to compiled executables
    # this allows us to override the MPI libraries to use those
    # found via LD_LIBRARY_PATH
    ./configure --prefix=/usr/local/mpich/install --disable-wrapper-rpath
    make -j 16 install
    # add to local environment to build pi.c
    export PATH=$PATH:/usr/local/mpich//install/bin
    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/mpich//install/lib
    env | sort
    cd ..
    rm -rf mpich-3.2.1

    # nccl2
    git clone https://github.com/NVIDIA/nccl.git
    cd nccl;
    make -j src.build
    make pkg.redhat.build
    rpm -i build/pkg/rpm/x86_64/libnccl* 
    cd -

    pip --no-cache-dir --disable-pip-version-check install mpi4py
    echo 'TEST_GCC=='
    which g++
    g++ --version
    pip --no-cache-dir --disable-pip-version-check install tensorflow==2.1.0
    HOROVOD_GPU_ALLREDUCE=NCCL HOROVOD_WITH_TENSORFLOW=1 HOROVOD_NCCL_HOME=/nccl/build/ pip install --no-cache-dir horovod
    ldconfig
    #pip --no-cache-dir --disable-pip-version-check install horovod
    #pip install horovod
    pip --no-cache-dir --disable-pip-version-check install --upgrade setuptools
    pip --no-cache-dir --disable-pip-version-check install future
    pip --no-cache-dir --disable-pip-version-check install 'matplotlib' 
    pip --no-cache-dir --disable-pip-version-check install 'ipython'    
    pip --no-cache-dir --disable-pip-version-check install 'ipykernel'  
    pip --no-cache-dir --disable-pip-version-check install numpy wheel zmq six pygments pyyaml cython gputil psutil humanize h5py tqdm scipy seaborn tables
    pip --no-cache-dir --disable-pip-version-check install  pandas scikit-image scikit-learn Pillow opencv-python
    pip --no-cache-dir --disable-pip-version-check install jupyter notebook

    # tensorflow
    #pip --no-cache-dir --disable-pip-version-check install tensorboard
    
    # keras
    pip --no-cache-dir --disable-pip-version-check install keras



    # customized
    yum install -y ninja-build
    pip --no-cache-dir --disable-pip-version-check install scikit-build
    pip --no-cache-dir --disable-pip-version-check install DracoPy
    pip --no-cache-dir --disable-pip-version-check install cloud-volume
    mkdir /container
    cd /container
    git clone https://github.com/Hanyu-Li/ffn
    cd ffn
    git checkout tf2
    pip --no-cache-dir --disable-pip-version-check install -r requirements.txt
    pip --no-cache-dir --disable-pip-version-check install -e .



    
    
